Tests de base
ls

echo Hello world

pwd

cd .. && pwd

cd /tmp ; ls

ğŸ”¹ Espaces et syntaxe Ã©trange
ls -l

ls | wc -l

echo

(juste des espaces)

ls|||grep a (pipes consÃ©cutifs invalides)

ls && (opÃ©rateur logique sans commande suivante)

ğŸ”¹ Quotes (simples et doubles)
echo "hello world"

echo 'hello world'

echo "un 'nested' test"

echo 'un "nested" test'

echo "test non fermÃ©

echo 'autre test non fermÃ©

ğŸ”¹ Redirections
echo hello > outfile

cat < infile

ls >

> outfile

cat << EOF (here_doc, Ã  tester si tu l'implÃ©mentes)

echo hello > outfile > outfile2

echo hello > /root/test (permission denied)

cat < fichier_qui_n_existe_pas

ğŸ”¹ Pipes
ls | wc

ls | grep "toto" | wc -l

| ls

ls |

ls || wc

cat file | | grep test

ğŸ”¹ Built-ins
cd /tmp

cd (sans argument)

cd fichier (pas un dossier)

exit

exit 42

exit 99999999999999999999999999999999 (overflow)

export VAR=value

export VAR="valeur avec des espaces"

unset VAR

env

export VAR

export VAR+=add (extension POSIX que tu peux rejeter si non supportÃ©e)

ğŸ”¹ Variables dâ€™environnement
export VAR=hello

echo $VAR

echo "$VAR"

echo '$VAR' (doit afficher littÃ©ralement $VAR)

echo $INEXISTANTE

VAR=42 ls (variable temporaire)

ğŸ”¹ Substitutions et expansions (si supportÃ©)
echo `ls`

echo $(ls)

echo $((1 + 2))

(Si non supportÃ©, ton shell doit les ignorer proprement ou afficher une erreur.)

ğŸ”¹ *Ctrl+D, Ctrl+C, Ctrl+*
Ctrl+C au milieu dâ€™une commande

Ctrl+D sur ligne vide (doit quitter)

Ctrl+\ (SIGQUIT, voir si tu ignores correctement)

ğŸ”¹ Cas exotiques et erreurs
./a.out (exÃ©cutable dans le dossier courant)

./non_existant

ls > /dev/full (simulateur dâ€™erreur "No space left on device")

ls > /proc/1/mem (permission denied)

ğŸ”¹ Commandes enchaÃ®nÃ©es
echo test ; ls ; pwd

false && echo ok (ne doit pas afficher "ok")

true || echo fail (ne doit pas afficher "fail")

(cd /tmp && ls) (subshell, Ã  ignorer si non gÃ©rÃ©)